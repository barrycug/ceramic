#!/usr/bin/env ruby
require "rubygems"
require "benchmark"
require "stringio"
require "zlib"

$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
require "trollop"
require "cover"

options = Trollop::options do
  opt :config, "Configuration file", :type => :string, :required => true
  opt :tile, "Tile indices (<z>/<x>/<y> or path to file)", :type => :strings
  opt :metatile, "Metatile indices (<z>/<x>/<y> or path to file)", :type => :strings
  opt :"metatile-size", "Metatile size", :type => :integer, :default => 8
end

begin
  config = Cover::Util.load_config(options[:config])
rescue ArgumentError
  Trollop::die "couldn't load config file #{options[:config]}"
end

begin
  tile_indices = Cover::Util.load_tile_indices(options[:tile]) if options[:tile]
rescue ArgumentError
  Trollop::die "tile indices must be in the form <z>/<x>/<y>"
end

begin
  metatile_indices = Cover::Util.load_tile_indices(options[:metatile]) if options[:metatile]
rescue ArgumentError
  Trollop::die "tile indices must be in the form <z>/<x>/<y>"
end

# Benchmarking

config.setup if config.respond_to?(:setup)

# Tiles

if tile_indices

  puts "%-20s  %7s  %11s  %11s" % ["Tile", "Time", "Size", "Zipped"]
  puts "=" * 55

  total_time = 0.0
  total_size = 0
  total_compressed_size = 0

  tile_indices.each do |tile_index|
  
    io = StringIO.new("")
  
    start = Time.now
  
    config.maker.write_tile(tile_index, io)
  
    time = Time.now - start
    size = io.string.bytesize
  
    compressed_size = Zlib.deflate(io.string).bytesize
  
    total_time += time
    total_size += size
    total_compressed_size += compressed_size
  
    puts "%-20s  % 5.2f s  % 8.1f kB  % 8.1f kB" % [tile_index, time, size.to_f / 1000, compressed_size.to_f / 1000]
  
  end

  puts "-" * 55
  puts "%-20s  % 5.2f s  % 8.1f kB  % 8.1f kB" % ["Total", total_time, total_size.to_f / 1000, total_compressed_size.to_f / 1000]
  puts "%-20s  % 5.2f s  % 8.1f kB  % 8.1f kB" % ["Mean", total_time / tile_indices.size, (total_size.to_f / 1000) / tile_indices.size, (total_compressed_size.to_f / 1000) / tile_indices.size]
  
end

if tile_indices && metatile_indices
  puts
end

# Metatiles

if metatile_indices

  puts "%-20s  %7s  %11s" % ["Metatile", "Time", "Size"]
  puts "=" * 42

  total_time = 0.0
  total_size = 0

  metatile_indices.each do |tile_index|
  
    io = StringIO.new("")
  
    start = Time.now
  
    config.maker.write_metatile(tile_index, io, :size => options[:"metatile-size"])
  
    time = Time.now - start
    size = io.string.bytesize
  
    total_time += time
    total_size += size
  
    puts "%-20s  % 5.2f s  % 8.1f kB" % [tile_index, time, size.to_f / 1000]
  
  end

  puts "-" * 42
  puts "%-20s  % 5.2f s  % 8.1f kB" % ["Total", total_time, total_size.to_f / 1000]
  puts "%-20s  % 5.2f s  % 8.1f kB" % ["Mean", total_time / metatile_indices.size, (total_size.to_f / 1000) / metatile_indices.size]
  
end

config.teardown if config.respond_to?(:teardown)
