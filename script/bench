#!/usr/bin/env ruby
require "rubygems"
require "benchmark"
require "stringio"
require "zlib"

$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
require "trollop"
require "cover"

options = Trollop::options do
  opt :config, "Configuration file", :type => :string, :required => true
  opt :tiles, "Tile indices", :type => :strings
  opt :metatiles, "Metatile indices", :type => :strings
  opt :size, "Metatile size", :type => :integer, :default => 8
end

if (options[:tiles] == nil && options[:metatiles] == nil) ||
   (options[:tiles] != nil && options[:metatiles] != nil)
  Trollop::die "must specify either tiles or metatiles (not both)"
end

require File.expand_path(options[:config])
  
if !Cover.config.respond_to?(:maker)
  puts "Config file must assign to Cover.config an object which responds to #maker"
  exit
end

if Cover.config.respond_to?(:setup)
  Cover.config.setup
end

# assemble tile indices

tile_indices = []

(options[:tiles] || options[:metatiles] || []).each do |index|

  # if an index is a file, read tile indexes from that file, skipping
  # lines that start with "#".

  if File.exist?(index)
    File.open(index, "r").each_line do |line|
      next if line =~ /^#/ || line =~ /^\s*$/
      tile_indices << Cover::TileIndex.new(line)
    end
  else
    tile_indices << Cover::TileIndex.new(index)
  end

end

# do benchmarking

if options[:tiles]
  puts "%20s  %9s  %9s  %9s" % ["", "Time", "Size", "Deflated"]
  puts "=" * 53
else
  puts "%20s  %9s  %9s" % ["", "Time", "Size"]
  puts "=" * 42
end

total_time = 0.0
total_size = 0
total_compressed_size = 0

tile_indices.each do |tile_index|
  
  io = StringIO.new("")
  
  start = Time.now
  
  if options[:tiles]
    Cover.config.maker.write_tile(tile_index, io)
  else
    Cover.config.maker.write_metatile(tile_index, io)
  end
  
  time = Time.now - start
  size = io.string.bytesize
  
  if options[:tiles]
    compressed_size = Zlib.deflate(io.string).bytesize
  else
    compressed_size = 0
  end
  
  total_time += time
  total_size += size
  total_compressed_size += compressed_size
  
  if options[:tiles]
    puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % [tile_index, time, size.to_f / 1000, compressed_size.to_f / 1000]
  else
    puts "%-20s  % 7.2f s  % 6.1f kB" % [tile_index, time, size.to_f / 1000]
  end
  
end

if options[:tiles]
  puts "-" * 53
  puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % ["Total", total_time, total_size.to_f / 1000, total_compressed_size.to_f / 1000]
  puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % ["Mean", total_time / tile_indices.size, (total_size.to_f / 1000) / tile_indices.size, (total_compressed_size.to_f / 1000) / tile_indices.size]
else
  puts "-" * 42
  puts "%-20s  % 7.2f s  % 6.1f kB" % ["Total", total_time, total_size.to_f / 1000]
  puts "%-20s  % 7.2f s  % 6.1f kB" % ["Mean", total_time / tile_indices.size, (total_size.to_f / 1000) / tile_indices.size]
end

if Cover.config.respond_to?(:teardown)
  Cover.config.teardown
end
