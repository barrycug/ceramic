#!/usr/bin/env ruby
require "rubygems"
require "benchmark"
require "stringio"
require "zlib"

$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
require "trollop"
require "cover"

options = Trollop::options do
  opt :config, "Configuration file", :type => :string, :required => true
  opt :tiles, "Tile indices", :type => :strings
  opt :metatiles, "Metatile indices", :type => :strings
  opt :size, "Metatile size", :type => :integer, :default => 8
end

if options[:tiles] == nil && options[:metatiles] == nil
  Trollop::die "must specify either tiles or metatiles"
end

require File.expand_path(options[:config])
  
if !Cover.config.respond_to?(:maker)
  puts "Config file must assign to Cover.config an object which responds to #maker"
  exit
end

if Cover.config.respond_to?(:setup)
  Cover.config.setup
end

# assemble tile indices

def process_index_list(list)
  
  result = []
  
  list.each do |index|
  
    # if an index is a file, read tile indexes from that file, skipping
    # lines that start with "#".
  
    if File.exist?(index)
      File.open(index, "r").each_line do |line|
        next if line =~ /^#/ || line =~ /^\s*$/
        result << Cover::TileIndex.new(line)
      end
    else
      result << Cover::TileIndex.new(index)
    end
  
  end
  
  result
  
end

tiles = process_index_list(options[:tiles] || [])
metatiles = process_index_list(options[:metatiles] || [])

# do benchmarking

puts "%20s  %9s  %9s  %9s" % ["", "Time", "Size", "Deflated"]
puts "=" * 53

total_time = 0.0
total_size = 0
total_compressed_size = 0

tiles.each do |tile|
  
  io = StringIO.new("")
  
  start = Time.now
  Cover.config.maker.write_tile(tile, io)
  
  time = Time.now - start
  size = io.string.bytesize
  compressed_size = Zlib.deflate(io.string).bytesize
  
  total_time += time
  total_size += size
  total_compressed_size += compressed_size
  
  puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % [tile, time, size.to_f / 1000, compressed_size.to_f / 1000]
  
end

puts "-" * 53
puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % ["Total", total_time, total_size.to_f / 1000, total_compressed_size.to_f / 1000]
puts "%-20s  % 7.2f s  % 6.1f kB  % 6.1f kB" % ["Mean", total_time / tiles.size, (total_size.to_f / 1000) / tiles.size, (total_compressed_size.to_f / 1000) / tiles.size]

if Cover.config.respond_to?(:teardown)
  Cover.config.teardown
end
