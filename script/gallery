#!/usr/bin/env ruby
require "rubygems"
require "zlib"
require "fileutils"
require "erb"
require "json"

$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
require "trollop"
require "cover"

options = Trollop::options do
  opt :config, "Configuration file", :type => :string, :required => true
  opt :tile, "Tile indices (<z>/<x>/<y> or path to file)", :type => :strings, :required => true
end

if ARGV.any?
  output_path = ARGV.shift
else
  Trollop::die "must specify an output path for the gallery"
end

begin
  config = Cover::Util.load_config(options[:config])
rescue ArgumentError
  Trollop::die "couldn't load config file #{options[:config]}"
end

begin
  tile_indices = Cover::Util.load_tile_indices(options[:tile]) if options[:tile]
rescue ArgumentError
  Trollop::die "tile indices must be in the form <z>/<x>/<y>"
end

# Create output directory

FileUtils.mkdir_p(output_path)

# Write tiles to output directory

config.setup if config.respond_to?(:setup)

@tiles = []

tile_indices.each do |tile_index|
  
  filename = "#{tile_index.z}-#{tile_index.x}-#{tile_index.y}.json"
  path = File.join(output_path, filename)
  
  puts "Writing #{tile_index} to #{path}..."
  
  start = Time.now
  
  File.open(path, "wb+") do |f|
    config.maker.write_tile(tile_index, f)
  end
  
  size = File.size(path)
  time = Time.now - start
  
  @tiles << { "size" => size, "time" => time, "filename" => filename }
  
end

config.teardown if config.respond_to?(:teardown)

# Write gallery

template_root = File.dirname(__FILE__) + "/../lib/gallery/"

erb = ERB.new(File.read(template_root + "index.erb"))

File.open(File.join(output_path, "index.html"), "w+") do |f|
  f << erb.result(binding)
end

FileUtils.cp(template_root + "render.js", File.join(output_path, "render.js"))
