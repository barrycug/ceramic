#!/usr/bin/ruby

$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"

require "cover"
require "tirex_backend"

class CoverBackend
  
  def setup(map_configs)
    
    Syslog.debug("Got setup, map_configs=#{map_configs.inspect}")
    
    @configurations = map_configs.inject({}) do |configs, (name, map_config)|
      
      configs[name] = {
        :cover_config => Cover::Util.load_config(map_config["cover_config_path"]),
        :metatile_size => map_config["cover_metatile_size"].to_i || 8
      }
      
      Syslog.debug("Added configuration for map=#{name}: #{configs[name].inspect}")
      
      configs
      
    end
    
    @configurations.each do |name, configuration|
      if configuration[:cover_config].respond_to?(:setup)
        Syslog.debug("Sending setup to Cover config for map=#{name}")
        configuration[:cover_config].setup
      end
    end
    
  end
  
  def teardown
    
    Syslog.debug("Got teardown")
    
    @configurations.each do |name, configuration|
      if configuration[:cover_config].respond_to?(:teardown)
        Syslog.debug("Sending teardown to Cover config for map=#{name}")
        configuration[:cover_config].teardown
      end
    end
    
  end
  
  def write(metatile_info, io)
    
    Syslog.debug("Request to write metatile: map=#{metatile_info.map} x=#{metatile_info.x} y=#{metatile_info.y} z=#{metatile_info.z}")
    
    raise ArgumentError, "Unknown map name" unless @configurations.has_key?(metatile_info.map)
    
    configuration = @configurations[metatile_info.map]
    
    index = Cover::TileIndex.new(metatile_info.z, metatile_info.x, metatile_info.y)
    
    configuration[:cover_config].maker.write_metatile(index, io, :size => configuration[:metatile_size])
    
  end
  
end

TirexBackend.run CoverBackend.new
