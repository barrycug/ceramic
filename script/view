#!/usr/bin/env ruby
require "rubygems"
require "rack"

$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
$LOAD_PATH << "#{File.dirname(__FILE__)}/../vendor"
require "trollop"
require "cover"

options = Trollop::options do
  opt :center, "Initial map center as lat,lon,zoom, for example: 37.7392,-122.3011,9", :type => :string
  opt :zoom, "List of zoom levels to serve, for example: 9 10 11 12 (omit to serve all available)", :type => :integers
  opt :port, "Port", :type => :integer, :default => 3857
  opt :host, "Host", :type => :string, :default => "0.0.0.0"
end

if ARGV.size == 0
  Trollop::die "must specify either a config file (*.rb) or a tileset file (*.mbtiles, etc.)"
end

if ARGV[0] =~ /.+\.rb$/
  options[:config] = ARGV[0]
else
  options[:tileset] = ARGV[0]
end

if options[:tileset]
  
  if !File.exist?(options[:tileset])
    puts "Tileset file doesn't exist: #{options[:tileset]}"
    exit
  end
  
  database = SQLite3::Database.new(options[:tileset])
  tileset = Cover::Tileset.new(database)

  Rack::Server.start(
    :app => Cover::Viewer.new(options.merge(tileset: tileset)),
    :Host => options[:host],
    :Port => options[:port],
    :zoom => options[:zoom]
  )
  
else
  
  require File.expand_path(options[:config])
  
  if !Cover.config.respond_to?(:maker)
    puts "Config file must assign to Cover.config an object which responds to #maker"
    exit
  end
  
  Cover.config.setup if Cover.config.respond_to?(:setup)

  Rack::Server.start(
    :app => Cover::Viewer.new(options.merge(maker: Cover.config.maker)),
    :Host => options[:host],
    :Port => options[:port],
    :zoom => options[:zoom]
  )
  
end
