<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Cover</title>
    <link rel="stylesheet" href="leaflet/leaflet.css">
    <style>
      
      #map {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      
    </style>
  </head>
  <body>
  
    <div id="map"></div>
    
    <script src="/leaflet/leaflet.js"></script>
    <script src="/debug_render.js"></script>
    <script src="/canvas_debug_layer.js"></script>
    <script src="/kothic.js"></script>
    <script src="/osmosnimki.js"></script>
    <script src="/kothic_layer.js"></script>
    <script>
    
      // Default map options
      
      var options = {};
      
      <% if @center %>
        options.zoom = <%= @center[2] %>;
        options.center = new L.LatLng(
          <%= @center[0] %>,
          <%= @center[1] %>
        );
      <% else %>
        options.zoom = 2;
        options.center = new L.LatLng(0, 0);
      <% end %>
      
      <% if @zoom %>
        options.minZoom = <%= @zoom.min %>;
        options.maxZoom = <%= @zoom.max %>;
      <% end %>
      
      
      // If we used localStorage to store the last position, use that instead
      
      (function() {
      
        var lat, lon, zoom;
      
        if ((lat = parseFloat(localStorage.getItem("lat"))) &&
            (lon = parseFloat(localStorage.getItem("lon"))) &&
            (zoom = parseInt(localStorage.getItem("zoom")))) {
          options.center = new L.LatLng(lat, lon);
          options.zoom = zoom;
        }
        
      })();
      
      
      // Set up the map
      
      var map = new L.Map("map", options);
      
      map.on("moveend", function() {
        localStorage.setItem("lat", map.getCenter().lat.toString());
        localStorage.setItem("lon", map.getCenter().lng.toString());
      });
      
      map.on("zoomend", function() {
        localStorage.setItem("zoom", map.getZoom().toString());
      });
      
      
      // Inspect popup
      
      var popup = new L.Popup();
      
      map.on("zoomend", function() {
        map.closePopup();
      });
      
      map.on("click", function(e) {
        
        // Get pixel position
        
        var position = map.project(e.latlng);
        
        // Get index path
        
        var index = map.getZoom() + "/" +
                    Math.floor(position.x / 256) + "/" +
                    Math.floor(position.y / 256);
                    
        // Display popup
        
        popup.setLatLng(e.latlng);
        popup.setContent("Inspect tile: <a href=\"/" + index + "/inspect\">" + index + "</a>");
        
        map.openPopup(popup);
        
      });
      
      
      // OSM base layer
      
      var osm = new L.TileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "Map images and data &copy; OpenStreetMap contributors"
      });
      
      
      // Canvas tiles (overlay)
      
      var canvasDebugLayer = new CanvasDebugLayer("/{z}/{x}/{y}");
      
      
      // Kothic
      
      var kothic = new KothicLayer("/{z}/{x}/{y}", {
        attribution: "Rendering by <a href=\"http://github.com/kothic/kothic-js\">Kothic JS</a>"
      });
      
      
      // Load MapCSS images for Kothic...
      
      MapCSS.preloadSpriteImage("osmosnimki-maps", "osmosnimki.png");
      
      
      // After the MapCSS images load, add the layers and set
      // up the layer control.
      
      MapCSS.onImagesLoad = function() {
        
        map.addLayer(osm);
        map.addLayer(canvasDebugLayer);
        
        var layersControl = new L.Control.Layers({
          "OpenStreetMap": osm,
          "Kothic": kothic
        }, {
          "Debug": canvasDebugLayer
        }, {
          collapsed: false
        });

        map.addControl(layersControl);
        
      }
      
    </script>
    
  </body>
</html>
